#lang racket

(require 2htdp/universe)
(require 2htdp/image)
(require "WidgetWorks.rkt")
(require "extras.rkt")
(require rackunit)
(require "sets.rkt")

;; canvas dimensions
(define CANVAS-WIDTH 600)         ;; in pixels
(define CANVAS-HEIGHT 500)        ;; in pixels
(define EMPTY-CANVAS (empty-scene CANVAS-WIDTH CANVAS-HEIGHT))

(define SBlock<%>
  (interface (SWidget<%>)
    
    
    ;; Ball-Push<%> -> Boolean
    ;; does this ball intersect the other one?
    intersects?
    
    ;; Integer^3 -> Boolean
    ;; Would a ball with the given x,y,r intersect this one?
    intersect-responder
    
    ;; RETURNS: the teammates of this sblock
    ;; get-team : -> ListOfSBlock
    ;get-team
    
    ;; EFFECT: adds the given sblock to this block's team
    ;; add-teammate: SBlock -> Void
    ;add-teammate
    
    ;;RETURNS: the x or y coordinates of this sblock
    ;; sblock-x : -> Integer
    ;; sblock-y : -> Integer
    ;sblock-x
    ;sblock-y
    
    ; SBall<%> -> Int
    ; GIVEN: An SBall<%>
    ; EFFECT: registers the ball to receive position updates from this wall.
    ; RETURNS: the x-position of the wall
    ;;register
    ))

(define Block<%>
  (interface (SWidget<%>)
    
    ; Int -> Void
    ; EFFECT: updates the ball's cached value of the wall's position
    ;;update-ball-pos
    
    ;; RETURNS: the teammates of this sblock
    ;; get-team : -> ListOfSBlock
    ;get-team
    
    ;; EFFECT: adds the given sblock to this block's team
    ;; add-teammate: SBlock -> Void
    ;add-teammate
    
    ;;RETURNS: the x or y coordinates of this sblock
    ;; sblock-x : -> Integer
    ;; sblock-y : -> Integer
    ;sblock-x
    ;sblock-y
    ))
;; cubelets-init : -> Container
;; GIVEN: no arguments
;; RETURNS: a Container, initially with no blocks, which when run, will
;; run in a 600x500 canvas and process the events in the description above.
(define (cubelets-init)
  (container-init 600 500))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; make-block : NonNegInt NonNegInt ListOfSBlock -> SBlock
;; GIVEN: an x and y position, and a list of blocks
;; WHERE: the list of blocks is the list of blocks already on the playground.
;; RETURNS: a new block, at the given position, with no teammates
#;(define (make-block x y lob)
    (new SBlock% x y ))

(define SBlock%
  (class* object% (SBlock<%>)
    
    (init-field x y lob)
    ;  ListOfToy
    
    (init-field [saved-mx 300] [saved-my 250])
    
    (super-new)
    
    ;; after-tick : -> Metatoy
    ;; Returns: Metatoy after tick
    ;; Strategy: Use HOF map on the ListOfToy in this Metatoy
    (define/public (after-tick)
      (for-each
       ;; Toy -> Toy
       ;; GIVEN: a toy
       ;; RETURNS: a Toy  like the given one but after a tick 
       (lambda (t) (send t after-tick))
       lob))
    
    ;; to-scene : -> Scene
    ;; Returns: A Scene with all the Toys in lob of Metatoy drawn
    ;; Use HOF foldr on the ListOfToy in this Metatoy  
    (define/public (add-to-scene scene)
      (foldr
       ;; Toy Scene -> Scene
       ;; GIVEN: a toy
       ;; RETURNS: a Scene like the given one but with the Toy  in it
       (lambda (t scene)
         (send t add-to-scene scene)) EMPTY-CANVAS lob))
    
    ;; after-key-event : KeyEvent -> Metatoy
    ;; STRATEGY: Cases on kev
    (define/public (after-key-event kev)
      (cond
        [(key=? kev "b")
        (set! lob (cons (new Block% [x saved-mx] [y saved-my]) lob))]
        [else
         (for-each
          ;; Toy -> Toy
          ;; GIVEN: a toy
          ;; RETURNS: a Toy  like the given one but after another key event
          (lambda (t) (send t after-key-event kev))
          lob)]))
    
    ;; world-after-mouse-event : Nat Nat MouseEvent -> Metatoy
    ;; STRATEGY: Cases on mev
    (define (after-mouse-event mx my mev)
      (cond
        [(mouse=? mev "button-down")
         (after-button-down mx my)]
        [(mouse=? mev "drag")
         (after-drag mx my)]
        [(mouse=? mev "button-up")
         (after-button-up mx my)]
        [(mouse=? mev "move")
         (after-move mx my)]
        [else this]))
    
    ;; world-after-button-down: Nat Nat -> Metatoy
    ;; STRATEGY: Use HOF map on ListOfToy
    (define/public (after-button-down mx my)
      (begin
        (set! saved-mx mx)
        (set! saved-my my))
      (for-each
       ;; Toy -> Toy
       ;; GIVEN: a toy
       ;; RETURNS: a Toy  like the given one but after button-down event
       (lambda (t)
         (send t after-button-down mx my))
       lob))
    
    ;; world-after-button-up: Nat Nat -> Metatoy
    ;; STRATEGY: Use HOF map on ListOfToy
    (define/public (after-button-up mx my)
      (for-each
       ;; Toy -> Toy
       ;; GIVEN: a toy
       ;; RETURNS: a Toy  like the given one but after button-up event
       (lambda (t) (send t after-button-up mx my))
       lob))
    
    ;; world-after-drag: Nat Nat -> Metatoy
    ;; STRATEGY: Use HOF map on ListOfToy
    (define/public (after-drag mx my)
      (for-each
       ;; Toy -> Toy
       ;; GIVEN: a toy
       ;; RETURNS: a Toy  like the given one but after drag event
       (lambda (t) (send t after-drag mx my lob))
       lob))
    
    (define/public (intersects?) 12)
    (define/public (intersect-responder) 12)
    
    ;; world-after-move: Nat Nat -> Metatoy
    ;; STRATEGY: Use HOF map on ListOfToy
    (define/public (after-move mx my)
      (for-each
       ;; Toy -> Toy
       ;; GIVEN: a toy
       ;; RETURNS: a Toy  like the given one but after move event
       (lambda (t) (send t after-move mx my))
       lob))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (make-sblock x y lob)
  (new SBlock% [x x] [y y][lob lob]))

(define (make-container)
  (local ((define EMPTY-CONTAINER (cubelets-init)))
    (begin
      (send EMPTY-CONTAINER add-stateful-widget (make-sblock 0 0 empty))
      (send EMPTY-CONTAINER run .5))))

(define Block%
  (class* object% (SWidget<%>)
    
    ; the x and y position of the center of the politician
    (init-field x y)
    
    ;; if the politician is selected, the x and y position of
    ;; the last button-down event inside the politician, relative to the
    ;; politician's center.
    (init-field [saved-mx 0] [saved-my 0])
    
    (field [lot empty])
    
    (init-field [selected? false])
    
    (super-new)
    
    ;; after-tick : -> Toy
    ;; RETURNS: A Toy like this one, but as it should be after a tick
    (define/public (after-tick)
      this)
    
    ;; after-key-event : KeyEvent -> Toy
    ;; RETURNS: A Toy like this one, but as it should be after the
    ;; given key event.
    (define/public (after-key-event kev)
      this)      
    
    (define/public (new-mouse-location-teammate mx my)
      (begin
        (set! saved-mx mx)
        (set! saved-my my)))
    
    (define/public (new-drag-position-teammate mx my)
      (begin
        (set! x (+ x (- mx saved-mx)))
        (set! y (+ y (- my saved-my))) 
        (new-mouse-location-teammate mx my)
        ))
    
    ; after-button-down : Integer Integer -> Toy
    ; RETURNS: A Toy like this one, but as it should be after the
    ;         given button-down event.
    (define/public (after-button-down mx my)
      (if (in-square? x y mx my)
          (begin
            (set! selected? true)
            (set! saved-mx mx)
            (set! saved-my my)
            (for-each 
             (lambda(t)
               (send t new-mouse-location-teammate mx my))
             lot)
            )
          this))
    
    (define (in-square? x y mx my)
      (and
       (<= 
        (- x 10)
        mx
        (+ x 10))
       (<= 
        (- y 10)
        my
        (+ y 10))))
    
    ; after-button-up : Integer Integer -> Toy
    ; RETURNS: Toy like this one, but as it should be after the
    ;         given button-up event.
    (define/public (after-button-up mx my)
      (if selected?
          (begin
            (set! selected? false)
            (set! saved-mx mx)
            (set! saved-my my)
            (for-each 
             (lambda(t)
               (send t new-mouse-location-teammate mx my))
             lot)
            )
          this))   
    
    ;; intersects?: -> Boolean
    ;; does this square intersect the other one?
    (define/public (intersects? other-b)
      (send other-b intersect-responder x y))
    
    ;; intersect-responder: Integer^2 -> Boolean
    ;; Would a square with the given x,y intersect this one?
    (define/public (intersect-responder other-x other-y)
      (and (<= (abs (- x other-x)) 20)
           (<= (abs (- y other-y)) 20)))
    
    
    ;; get-team : -> ListOfSBlock
    ;; RETURNS: the teammates of this sblock
    (define/public (get-team)
      lot)
    
    ; sblock-x : -> Integer
    ; sblock-y : -> Integer
    ; RETURNS: the x or y coordinates of this sblock
    (define/public (sblock-x)
      x)
    (define/public (sblock-y)
      y)
    
    ;; add-teammate-responder: -> LOT
    ;; update the teammates of other-block
    (define/public (add-teammate other-block)
      (set! lot (set-cons other-block lot)))
    
    ;    ;; add-teammate: -> LOT
    ;    ;; add this object to the teammate of other-b
    ;    (define/public (get-teammate other-b)
    ;      (send other-b get-teammate-responder))
    ;    
    ;    ;; add-teammate-responder: -> LOT
    ;    ;; update the teammates of other-block
    ;    (define/public (get-teammate-responder)
    ;      (get-team))
    ;    
    ;    ;; update-x: -> Int
    ;    ;; update the value of x in this teammate
    ;    (define/public (update-x other-b)
    ;      (send other-b update-x-responder x))
    ;    
    ;    ;; update-x-responder: -> Int
    ;    ;; update the x value of itself
    ;    (define/public (update-x-responder other-x)
    ;      (set! x (+ x other-x)))
    
    ; after-drag : Integer Integer -> Toy
    ; RETURNS: A Toy like this one, but as it should be after the
    ;         given after-drag event.
    (define/public (after-drag mx my lob)
      (if selected?
          (begin
            (set! x (+ x (- mx saved-mx)))
            (set! y (+ y (- my saved-my)))
            (set! saved-mx mx)
            (set! saved-my my)
            (set! lob (set-diff lob (set-union lot (list this))))
            ;; for checking if the square intersects with the other square
            ;; and then addin them to lot if they intersect
            (for-each (lambda (b)
                        (if (send this intersects? b)
                            ;(println "hello")
                            (begin
                              
                              ;; add B in teammates of A
                              (set! lot (cons b lot))
                              
                              ;; add B's teammates in A
                              (for-each (lambda (t)
                                          (set! lot (cons t lot)))
                                        ;(println "in B's teammates add A"))
                                        (send b get-team))
                              
                              
                              ;; add A in B's teammates
                              (send b add-teammate this)
                              
                              ;; add A's teammates in B
                              (for-each (lambda (t)
                                          ;(set! lot (cons b lot)
                                          (send b add-teammate t))
                                        ;(println "in A's teammates add B"))
                                        lot)
                              
                              ;; add A to teammates of B
                              (for-each
                               (lambda (block)
                                 (send block add-teammate this)) 
                               (send b get-team))
                              
                              ;; add B to teammates of A
                              (for-each
                               (lambda (block)
                                 (send block add-teammate b))
                               lot)
                              
;                              ;; add A's teammates to B's teammates
                              (for-each
                               (lambda (b)
                                 (for-each (lambda (t)
                                             (begin
                                             (send b add-teammate t)
                                             (println "in this loop")))
                                           lot)) 
                               (send b get-team))
;                              
;                              ;; add B's teammates to A's teammates
                              (for-each
                               (lambda (t)
                                 (for-each (lambda (b)
                                             (send t add-teammate b))
                                           (send b get-team))) 
                               lot)
                              
                              ;update the mouse-x,y diff of the teammates.
                              (for-each 
                               (lambda(t)
                                 (send t new-mouse-location-teammate mx my))
                               lot)
                              
                              ;(println "end of this intersects loop")
                              )
                            this)) lob)
            (for-each
             (lambda (t) (send t new-drag-position-teammate mx my)) lot)
            )
          this))
    
    ; after-move : Integer Integer -> Toy
    ; RETURNS: A Toy like this one, but as it should be after the
    ;         given after-move event.
    (define/public (after-move mx my)
      this)
    
    ;; to-scene : Scene -> Scene
    ;; RETURNS: a scene like the given one, but with this Toy painted
    ;; on it.
    (define/public (add-to-scene scene)
      (if selected?
          (place-image (square 20 "outline" "red") x y scene)    
          (place-image (square 20 "outline" "blue") x y scene)))))